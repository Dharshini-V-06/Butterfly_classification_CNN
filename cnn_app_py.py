# -*- coding: utf-8 -*-
"""CNN_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16kgL82AgLS2qDgYo19trAO55njQRsPJi
"""

import streamlit as st
import tensorflow as tf
import numpy as np
from tensorflow.keras.preprocessing import image
import json

# -----------------------------
# 1. Page configuration
# -----------------------------
st.set_page_config(page_title="Butterfly Classifier ü¶ã", layout="centered")
st.title("ü¶ã Butterfly Species Classifier")
st.write("Upload a butterfly image and let the model predict its species!")

# -----------------------------
# 2. Load trained model
# -----------------------------
@st.cache_resource
def load_model():
    model = tf.keras.models.load_model("best_butterfly_model.keras")
    return model

model = load_model()

# -----------------------------
# 3. Define class labels (same as train_gen.class_indices)
# -----------------------------
CLASS_INDICES = {
 'ADONIS': 0, 'AFRICAN GIANT SWALLOWTAIL': 1, 'AMERICAN SNOOT': 2, 'AN 88': 3,
 'APPOLLO': 4, 'ATALA': 5, 'BANDED ORANGE HELICONIAN': 6, 'BANDED PEACOCK': 7,
 'BECKERS WHITE': 8, 'BLACK HAIRSTREAK': 9, 'BLUE MORPHO': 10, 'BLUE SPOTTED CROW': 11,
 'BROWN SIPROETA': 12, 'CABBAGE WHITE': 13, 'CAIRNS BIRDWING': 14, 'CHECQUERED SKIPPER': 15,
 'CHESTNUT': 16, 'CLEOPATRA': 17, 'CLODIUS PARNASSIAN': 18, 'CLOUDED SULPHUR': 19,
 'COMMON BANDED AWL': 20, 'COMMON WOOD-NYMPH': 21, 'COPPER TAIL': 22, 'CRECENT': 23,
 'CRIMSON PATCH': 24, 'DANAID EGGFLY': 25, 'EASTERN COMA': 26, 'EASTERN DAPPLE WHITE': 27,
 'EASTERN PINE ELFIN': 28, 'ELBOWED PIERROT': 29, 'GOLD BANDED': 30, 'GREAT EGGFLY': 31,
 'GREAT JAY': 32, 'GREEN CELLED CATTLEHEART': 33, 'GREY HAIRSTREAK': 34, 'INDRA SWALLOW': 35,
 'IPHICLUS SISTER': 36, 'JULIA': 37, 'LARGE MARBLE': 38, 'MALACHITE': 39, 'MANGROVE SKIPPER': 40,
 'MESTRA': 41, 'METALMARK': 42, 'MILBERTS TORTOISESHELL': 43, 'MONARCH': 44, 'MOURNING CLOAK': 45,
 'ORANGE OAKLEAF': 46, 'ORANGE TIP': 47, 'ORCHARD SWALLOW': 48, 'PAINTED LADY': 49,
 'PAPER KITE': 50, 'PEACOCK': 51, 'PINE WHITE': 52, 'PIPEVINE SWALLOW': 53, 'POPINJAY': 54,
 'PURPLE HAIRSTREAK': 55, 'PURPLISH COPPER': 56, 'QUESTION MARK': 57, 'RED ADMIRAL': 58,
 'RED CRACKER': 59, 'RED POSTMAN': 60, 'RED SPOTTED PURPLE': 61, 'SCARCE SWALLOW': 62,
 'SILVER SPOT SKIPPER': 63, 'SLEEPY ORANGE': 64, 'SOOTYWING': 65, 'SOUTHERN DOGFACE': 66,
 'STRAITED QUEEN': 67, 'TROPICAL LEAFWING': 68, 'TWO BARRED FLASHER': 69, 'ULYSES': 70,
 'VICEROY': 71, 'WOOD SATYR': 72, 'YELLOW SWALLOW TAIL': 73, 'ZEBRA LONG WING': 74
}

# Reverse mapping
CLASS_NAMES = {v: k for k, v in CLASS_INDICES.items()}

# -----------------------------
# 4. Image preprocessing
# -----------------------------
def preprocess_image(uploaded_file):
    img = image.load_img(uploaded_file, target_size=(128, 128))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0) / 255.0
    return img_array

# -----------------------------
# 5. Prediction logic
# -----------------------------
uploaded_file = st.file_uploader("üì∏ Upload a butterfly image...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    st.image(uploaded_file, caption="Uploaded Image", use_container_width=True)
    img_array = preprocess_image(uploaded_file)

    with st.spinner("Classifying... üß†"):
        prediction = model.predict(img_array)
        class_index = np.argmax(prediction)
        confidence = np.max(prediction)

    st.success(f"**Predicted Species:** {CLASS_NAMES[class_index]}")
    st.write(f"**Confidence:** {confidence*100:.2f}%")

    # Optionally show top-5 predictions
    top5_idx = prediction[0].argsort()[-5:][::-1]
    st.subheader("Top 5 Predictions:")
    for idx in top5_idx:
        st.write(f"{CLASS_NAMES[idx]} ‚Äî {prediction[0][idx]*100:.2f}%")

# -----------------------------
# 6. Footer
# -----------------------------
st.markdown("---")
st.caption("Built with ‚ù§Ô∏è using Streamlit & TensorFlow")